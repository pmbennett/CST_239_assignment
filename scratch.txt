  public void sendToServer(Product item) throws JsonProcessingException {
        System.out.println(item);
        ObjectMapper om = new ObjectMapper();
        String json = om.writeValueAsString(item);
        out.println(json);
        System.out.println("sendtoserver exec");
        System.out.println(json);
    }


reads from update file 

     public void updateInv(String invFile) throws IOException {

        File file = new File(invFile);
        Scanner scan = new Scanner(file);

        while (scan.hasNext()) {
            String json = scan.nextLine();
            ObjectMapper mapper = new ObjectMapper();
            if (json.contains("damage")) {
                Weapon item = mapper.readValue(json, Weapon.class);
                sendToServer(item);
            } else if (json.contains("protection")) {
                Armor item = mapper.readValue(json, Armor.class);
                sendToServer(item);
            } else if (json.contains("healthRegen")) {
                Health item = mapper.readValue(json, Health.class);
                sendToServer(item);
            }
        }
        scan.close();
        System.out.println("updateInv executes");
    }



      public void appendToFile() throws IOException {
        out = new PrintWriter (socket.getOutputStream(), true); // recieves info from client
        in = new BufferedReader(new InputStreamReader(socket.getInputStream())); // returns info to client

        Scanner scan = new Scanner(in.readLine()); // reads input from client
        FileWriter invUpdate = new FileWriter("inventory.json", true); // opens filewriter to write to JSON file
        PrintWriter invUpdateWriter = new PrintWriter(invUpdate); // printwriter that channels through filewriter

        while (scan.hasNext()) {
            String json = scan.nextLine();
            invUpdateWriter.println(json);
        }
        System.out.println("append to file executes");
        scan.close();
        invUpdateWriter.close();
        invUpdate.close();
    }


client main 


    System.out.println("To update the store, press U.");
        System.out.println("To return salable inventory, press R.");
        System.out.println("To quit the Admin Client, press Q.");

        Scanner scan = new Scanner(System.in);
        Character userInput = scan.next().charAt(0);

        while (userInput != 'Q') {
            System.out.println("To update the store, press U.");
            System.out.println("To return salable inventory, press R.");
            System.out.println("To quit the Admin Client, press Q.");

            if (userInput.equals('U')) {
                // update inventory
            } else if (userInput.equals('R')) {
                // return store inventory method
            }
            userInput = scan.next().charAt(0);
        }